from datetime import datetime, timezone
import random
import string
from typing import Optional
from urllib.parse import parse_qs, urlparse

def clean_graph(input_dict: dict) -> dict:
  """
  Removes keys from a dictionary where the corresponding value is None.

  :param input_dict: Dictionary to be cleaned
  :return: A new dictionary with all keys with None values removed
  """
  # Create a copy of the keys list to safely modify the dict while iterating
  for key in list(input_dict.keys()):
    # Remove the key if the value is None or an empty string
    if type(input_dict[key]) is list and len(input_dict[key]) == 1:
      input_dict[key] = input_dict[key][0]
    if not input_dict[key] or input_dict[key] == "":
      del input_dict[key]
  return input_dict

def fix_graph_links(graph: dict) -> dict:
  '''
  Replaces the Facebook, Instagram and Twitter and LinkedIn usernames with their links

  :param graph: Graph generated by the function
  :return: Graph modified by replacing the usernames with links
  '''

  social_networks = {
    'facebook': 'https://www.facebook.com/{}',
    'instagram': 'https://instagram.com/{}',
    'twitter': 'https://twitter.com/{}',
    'linkedin': 'https://linkedin.com/in/{}',
  }

  graph['social_links'] = {}

  for network, url_format in social_networks.items():
    if network in graph:
      username = graph[network]
      if type(username) is list:
        username = username[0]
      graph['social_links'][network] = url_format.format(username)
      del graph[network]

  return graph

def generate_id(len: int) -> str:
  '''
  Generates a random string of the specified length

  :param len: Length of the string to be generated
  :return: Random string of the specified length
  '''
  return ''.join(random.choices(string.ascii_lowercase + string.digits, k=len))

def parse_date_to_milliseconds(date_str) -> Optional[int]:
  try:
    # Define the date format
    date_format = "%Y-%m-%d %H:%M:%S.%f%z"
    
    # Parse the date string into a datetime object
    date_obj = datetime.strptime(date_str, date_format)
    
    # Convert the datetime object to UTC if it's not already
    date_obj = date_obj.astimezone(timezone.utc)
    
    # Convert the datetime object to a timestamp (seconds since the epoch)
    timestamp = date_obj.timestamp()
    
    # Convert seconds to milliseconds and return
    return int(timestamp * 1000)
  except:
    return None
  
def extract_gnews_article_id(url):
  '''
  Find and returns the article ID from given Google News URL
  '''
  return url.split('/articles/')[1].split('?')[0]